from core import loader 
import requests 
import re 
import os

@loader.tds 
class ModuleManage(loader.Module): 
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏: –∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ"""

    strings = {"name": "ModuleManage"}
    
    async def unloadcmd(self, message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùó –£–∫–∞–∂–∏ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
        mod_name = args[1].strip()
        success = await self.bot.module_manager.unload_module(mod_name)
        if success:
            await message.edit(f"‚úÖ –ú–æ–¥—É–ª—å `{mod_name}` –≤—ã–≥—Ä—É–∂–µ–Ω.")
        else:
            await message.edit(f"‚ùå –ú–æ–¥—É–ª—å `{mod_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    
    async def reloadcmd(self, message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùó –£–∫–∞–∂–∏ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.")
        mod_name = args[1].strip()
        success = await self.bot.module_manager.reload_module(mod_name)
        if success:
            await message.edit(f"üîÅ –ú–æ–¥—É–ª—å `{mod_name}` –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
        else:
            await message.edit(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å `{mod_name}`.")
    
    async def loadcmd(self, message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùó –£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è (–±–µ–∑ `.py`).")
        mod_name = args[1].strip()
        path = self.bot.module_manager.find_module_path(mod_name)
        if not path:
            return await message.edit("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        success = await self.bot.module_manager.load_module(path)
        await message.edit(
            f"‚úÖ –ú–æ–¥—É–ª—å `{mod_name}` –∑–∞–≥—Ä—É–∂–µ–Ω." if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å `{mod_name}`."
        )
    
    async def loadmodcmd(self, message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùó –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥—É–ª—å.")
    
        url = args[1].strip()
    
        # –ï—Å–ª–∏ —ç—Ç–æ GitHub blob-—Å—Å—ã–ª–∫–∞ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ raw
        if "github.com" in url and "/blob/" in url:
            url = re.sub(r"github\\.com/([^/]+/[^/]+)/blob/(.+)", r"raw.githubusercontent.com/\1/\2", url)
            url = "https://" + url
    
        module_name = url.split("/")[-1].replace(".py", "")
    
        try:
            r = requests.get(url)
            code = r.content.decode("utf-8", errors="ignore")
    
            # –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥
            code = code.replace('\ufeff', '').replace('\u00A0', ' ').replace('\t', ' ')
            code = re.sub(r'from\\s+\\.\\.\\s+import', 'from core import', code)
            code = re.sub(r'from\\s+\\.\\.([a-zA-Z0-9_]+)\\s+import', r'from core.\1 import', code)
            
            os.makedirs("../out_modules", exist_ok=True)
            path = f"../out_modules/{module_name}.py"
            with open(path, "w", encoding="utf-8") as f:
                f.write(code)
    
            success = await self.bot.module_manager.load_module(path)
            await message.edit(
                f"‚úÖ –ú–æ–¥—É–ª—å `{module_name}` –∑–∞–≥—Ä—É–∂–µ–Ω!" if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å `{module_name}`."
            )
    
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: `{e}`")
    
    async def delmodcmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–¥—É–ª—å (.py) –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏"""
    
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            return await message.edit("‚ùóÔ∏è –£–∫–∞–∂–∏ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
        mod_name = args[1].strip()
        path = self.bot.module_manager.find_module_path(mod_name)
    
        if not path:
            return await message.edit(f"‚ùå –§–∞–π–ª –º–æ–¥—É–ª—è `{mod_name}.py` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
        unloaded = await self.bot.module_manager.unload_module(mod_name)
        if unloaded:
            await message.edit(f"üîÅ –ú–æ–¥—É–ª—å `{mod_name}` –≤—ã–≥—Ä—É–∂–µ–Ω, —É–¥–∞–ª—è—é —Ñ–∞–π–ª...")
        else:
            await message.edit(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å `{mod_name}` –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Ñ–∞–π–ª –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω...")
    
        try:
            os.remove(path)
            await message.edit(f"üóë –ú–æ–¥—É–ª—å `{mod_name}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: `{e}`")
    
    async def modscmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö)"""
        from pathlib import Path

        loaded = list(self.bot.module_manager.modules.keys())
        text = "üì¶ <b>–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:</b>\n\n"

        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        internal = list(Path("modules").glob("*.py"))
        text += "<u>üß© –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</u>\n"
        count_int_loaded = 0

        for file in sorted(internal):
            name = file.stem
            if name in loaded:
                text += f"‚úÖ <code>{file.name}</code>\n"
                count_int_loaded += 1
            else:
                text += f"‚ùå <code>{file.name}</code>\n"

        # –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏
        external = list(Path("../out_modules").glob("*.py"))
        text += "\n<u>üß™ –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏:</u>\n"
        count_ext_loaded = 0

        for file in sorted(external):
            name = file.stem
            if name in loaded:
                text += f"‚úÖ <code>{file.name}</code>\n"
                count_ext_loaded += 1
            else:
                text += f"‚ùå <code>{file.name}</code>\n"

        total_int = len(internal)
        total_ext = len(external)

        text += (
            f"\n<b>–ò—Ç–æ–≥–æ:</b>\n"
            f"üß© –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö: <b>{total_int}</b> | ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{count_int_loaded}</b>\n"
            f"üß™ –í–Ω–µ—à–Ω–∏—Ö: <b>{total_ext}</b> | ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{count_ext_loaded}</b>"
        )

        await message.edit(text, parse_mode="html")