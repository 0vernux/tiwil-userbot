import os
import sys
import json
import asyncio
from pathlib import Path
from telethon import TelegramClient, events, Button
from core.module_manager import ModuleManager
from core.logger_mod import logger


PRIVATE_PATH = Path(__file__).resolve().parent.parent / "private"
sys.path.insert(0, str(PRIVATE_PATH))


sys.path.append(str(Path(__file__).resolve().parent.parent.parent / "private"))
import config

class UserBot:
    def __init__(self):
        session_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../private", config.SESSION_NAME))
        self.client = TelegramClient(session_path, config.API_ID, config.API_HASH)
        self.module_manager = ModuleManager(self)
        self.modules = {}
        self.owner_id = config.OWNER_ID

    async def restart(self, event=None):
        if event:
            try:
                await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç ID
                with open("restart_info.json", "w") as f:
                    json.dump({
                        "chat_id": event.chat_id,
                        "msg_id": event.id
                    }, f)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å restart_info: {e}")

        os.system(f"nohup python3 main.py > /dev/null 2>&1 &")

        if self.client.is_connected():
            await self.client.disconnect()
        os._exit(0)

    async def notify_restart(self):
        """–ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ '‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!' –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        try:
            if os.path.exists("restart_info.json"):
                with open("restart_info.json", "r") as f:
                    data = json.load(f)

                msg = await self.client.get_messages(data["chat_id"], ids=data["msg_id"])
                await msg.edit("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
                os.remove("restart_info.json")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await self.client.send_message(
                    data["chat_id"],
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç.",
                    buttons=[Button.inline("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥", b"show_log")]
                )
            except Exception as e2:
                logger.error(f"–ò –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")

    async def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

        @self.client.on(events.NewMessage(pattern=r"\.start"))
        async def restart_handler(event):
            try:
                await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                await self.module_manager.load_all_modules()
                await event.edit("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ .start: {e}")
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.")
                await event.respond(
                    "üìÑ –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ:",
                    buttons=[Button.inline("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥", b"show_log")]
                )

        @self.client.on(events.NewMessage(pattern=r'\.\s*hello'))
        async def hello_handler(event):
            await event.edit("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
            
        @self.client.on(events.CallbackQuery(data=b"show_log"))
        async def show_log_handler(event):
            path = Path("logs/bot.log")
            if path.exists():
                with open(path, "r", encoding="utf-8") as f:
                    last_lines = "".join(f.readlines()[-15:])
                await event.respond("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n\n" + f"<pre>{last_lines}</pre>", parse_mode="html")
            else:
                await event.respond("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def start(self):
        await self.client.start()
        print(f"Client is connected: {self.client.is_connected()}")
        await self.setup_handlers()
        await self.module_manager.load_all_modules("modules")
        await self.module_manager.load_all_modules("../out_modules")
        await self.notify_restart()
        print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω") 
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {list(self.module_manager.modules.keys())}")
        await self.client.run_until_disconnected()